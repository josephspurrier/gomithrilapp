<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>gomithrilapp Blog</title>
        <link>https://josephspurrier.github.io/gomithrilapp/blog</link>
        <description>The best place to stay up-to-date with the latest gomithrilapp news and events.</description>
        <lastBuildDate>Thu, 02 Apr 2020 06:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <image>
            <title>gomithrilapp Blog</title>
            <url>https://josephspurrier.github.io/gomithrilapp/undefined</url>
            <link>https://josephspurrier.github.io/gomithrilapp/blog</link>
        </image>
        <copyright>Copyright Â© 2020 Joseph Spurrier</copyright>
        <item>
            <title><![CDATA[Learning Webpack]]></title>
            <link>https://josephspurrier.github.io/gomithrilapp/blog/2020/04/02/webpack.html</link>
            <guid>https://josephspurrier.github.io/gomithrilapp/blog/2020/04/02/webpack.html</guid>
            <pubDate>Thu, 02 Apr 2020 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>This project has really allowed me to explore <a href="https://www.npmjs.com/">npm</a> and <a href="https://webpack.js.org/">webpack</a> recently. In the past, I used frameworks like <a href="https://nuxtjs.org/">Nuxt.js</a> that already had webpack integrated so I didn't have to configure much. With <a href="https://mithril.js.org/">Mithril</a>, I followed the instructions on this <a href="https://mithril.js.org/installation.html#quick-start-with-webpack">article</a> and didn't realize how easy it was to get webpack installed and running so quickly. I was also amazed at how fast webpack generated files when it didn't have much configured.</p>
<p>Once I got it running, I added the following capabilities in this order:</p>
<ul>
<li>added <code>babel-loader</code> to support ES6 modules</li>
<li>converted the CommonJS <strong>webpack.config.js</strong> file to an ES6 <strong>webpack.config.babel.js</strong> file</li>
<li>added <code>eslint-loader</code> to check code for formatting issues</li>
<li>added <code>html-webpack-plugin</code> to generate an index file</li>
<li>added <code>clean-webpack-plugin</code> to remove generated files on rebuild</li>
<li>added <code>mini-css-extract-plugin</code> to generate CSS from SCSS</li>
<li>added <code>copy-webpack-plugin</code> to copy static files into the distribution folder</li>
<li>enabled <code>splitChunks</code> to separate out the vendored modules into a separate file</li>
<li>added <code>output.publicPath</code> to set all assets to absolute instead of relative in the <strong>index.html</strong> file</li>
</ul>
<p>It was definitely a good learning experience and I recommend you configure webpack on your own if you've never set it up from scratch before. <a href="https://mithril.js.org/installation.html#quick-start-with-webpack">Here's</a> a great place to start.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[From Vue to Mithril]]></title>
            <link>https://josephspurrier.github.io/gomithrilapp/blog/2020/03/30/mithril.html</link>
            <guid>https://josephspurrier.github.io/gomithrilapp/blog/2020/03/30/mithril.html</guid>
            <pubDate>Mon, 30 Mar 2020 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>I subscribe to the Golang Weekly newsletter. Last week, <a href="https://golangweekly.com/issues/305">they</a> had a link to a repo for an application called <a href="https://github.com/RadhiFadlillah/duit">duit</a> which is built with Go and <a href="https://mithril.js.org/">Mithril</a>. I did a quick search comparing Vue to Mithril and found this <a href="https://mithril.js.org/framework-comparison.html">article</a> by the Mithril folks.</p>
<p>Go has always been close to my heart because <a href="https://golang.org/doc/">&quot;Go is expressive, concise, clean, and efficient.&quot;</a>. I've been looking for a JavaScript framework that is built with the same values:</p>
<pre><code class="hljs">Why use Mithril?

In one sentence: because Mithril is pragmatic. This 10 minute guide is a good example: that's how long it takes to learn components, XHR and routing - and that's just about the right amount of knowledge needed to build useful applications.
</code></pre>
<p>The pragmatic characteristics also come out in their documentation:</p>
<pre><code class="hljs">As a rule of thumb, if your team is already heavily invested in another framework/library/stack, it makes more sense to stick with it, unless your team agrees that there's a very strong reason to justify a costly rewrite.

However, if you're starting something new, do consider giving Mithril a try, if nothing else, to see how much value Mithril adopters have been getting out of under 10kb (gzipped) of code. Mithril is used by many well-known companies (e.g. Vimeo, Nike, Fitbit), and it powers large open-sourced platforms too (e.g. Lichess, Flarum).
</code></pre>
<p>I also really liked hearing Mithril has more documentation than it needs - this saves me from having to search around for the right information and I learn a little more at the same time:</p>
<pre><code class="hljs">Mithril documentation typically errs on the side of being overly thorough if a topic involves things outside of the scope of Mithril. For example, when a topic involves a 3rd party library, Mithril documentation walks through the installation process for the 3rd party library. Mithril documentation also often demonstrates simple, close-to-the-metal solutions to common use cases in real-life applications where it's appropriate to inform a developer that web standards may be now on par with larger established libraries.
</code></pre>
<p>I tried it out for an afternoon and then decided to convert the project over to use Mithril. Have no fear - I left the old <a href="https://github.com/josephspurrier/govueapp">govueapp</a> repo intact and then created a new repo called <a href="https://github.com/josephspurrier/gomithrilapp">gomithrilapp</a> and then copied the code and commit history over. You'll also notice there are a lot of the same blog posts. Enjoy the new language!</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Guides for Docker Compose and Documentation]]></title>
            <link>https://josephspurrier.github.io/gomithrilapp/blog/2020/03/23/compose-and-docs.html</link>
            <guid>https://josephspurrier.github.io/gomithrilapp/blog/2020/03/23/compose-and-docs.html</guid>
            <pubDate>Mon, 23 Mar 2020 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>I added a few new pages to the Guides section:</p>
<ul>
<li><a href="https://josephspurrier.github.io/gomithrilapp/docs/docker-compose">Docker Compose</a></li>
<li><a href="https://josephspurrier.github.io/gomithrilapp/docs/documentation">Documentation</a></li>
</ul>
<p>The Docker Compose guide goes over how to use the <code>docker-compose</code> commands and explains the configuration in the <code>docker-compose.yml</code> file.</p>
<p>On the documentation front, it feels like inception - I'm using documentation to write documentation around how to generate documentation!</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Docs through Docusaurus]]></title>
            <link>https://josephspurrier.github.io/gomithrilapp/blog/2020/03/15/docusaurus.html</link>
            <guid>https://josephspurrier.github.io/gomithrilapp/blog/2020/03/15/docusaurus.html</guid>
            <pubDate>Sun, 15 Mar 2020 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>I've used <a href="https://gohugo.io/">Hugo</a> in the past, but I decided to give
<a href="https://docusaurus.io/">Docusaurus</a> a shot and it's been a pretty good process so far. I'm haven't spent much time with React but the project is pretty easy to use. It's great you can build sidebars referencing pages and when you load that page, it will load the sidebar with it. Their documentation is a little limited but I easily
fall back to plain HTML to get the layouts working the way I want.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Smarter Testing]]></title>
            <link>https://josephspurrier.github.io/gomithrilapp/blog/2020/03/14/smarter-testing.html</link>
            <guid>https://josephspurrier.github.io/gomithrilapp/blog/2020/03/14/smarter-testing.html</guid>
            <pubDate>Sat, 14 Mar 2020 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>When I first wrote the code and tests in note.go and note_test.go, I wanted to
see if I could get to 100% code coverage. It's a good exercise if you've never
done it before to see what you have to do to get there. It requires a lot more
effort than it's worth for most applications, but still a good exercise.
<a href="https://github.com/josephspurrier/gomithrilapp/commit/5204659c7ab7a19c24b2d3c29f2fb03b7760f119">View commit</a>.</p>
<p>In Go, table driven tests is very common. You can read able them
<a href="https://github.com/golang/go/wiki/TableDrivenTests">here</a>. It helps cut down
on all the boilerplate code you have to repeat everywhere.</p>
<p>It's also helpful if you have a setup and teardown process that is run with
each of your tests. Since that code was copy and pasted in many different places,
considated they to easy to use functions.
<a href="https://github.com/josephspurrier/gomithrilapp/commit/89020eaea7cd7922d5936c566513c30602e2e701">View commit</a>.</p>
<p>Code samples below.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[From Jest to Cypress]]></title>
            <link>https://josephspurrier.github.io/gomithrilapp/blog/2020/03/08/jest-to-cypress.html</link>
            <guid>https://josephspurrier.github.io/gomithrilapp/blog/2020/03/08/jest-to-cypress.html</guid>
            <pubDate>Sun, 08 Mar 2020 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>It's hard to argue that <a href="https://www.cypress.io/">Cypress</a> doesn't make an
engineer's life easier. I originally wrote tests for <a href="https://jestjs.io/">Jest</a>,
but after seeing a bunch of vulnerabilities pop up in the packages that it's
using, I decided it was a good time to switch to Cypress so I could access the
wonderful GUI that's available.
<a href="https://github.com/josephspurrier/gomithrilapp/commit/53201272a91e90b555ad296f1db128d1f95a8153">View commit</a>.</p>
<p>I'll admit, I'm not a JavaScript developer, but Cypress does make it more fun
to write tests because you can see your progress live. A video is below.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Finally, ESLint Working with VSCode]]></title>
            <link>https://josephspurrier.github.io/gomithrilapp/blog/2020/03/08/eslint.html</link>
            <guid>https://josephspurrier.github.io/gomithrilapp/blog/2020/03/08/eslint.html</guid>
            <pubDate>Sun, 08 Mar 2020 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>I finally figured out how to get <a href="https://eslint.org/">ESLint</a> to work properly
with Visual Studio Code (VSCode).
<a href="https://github.com/josephspurrier/gomithrilapp/commit/f85d046355c8088749e0efadcce491f430b59191">View commit</a>.</p>
<p>It was quite a challenge getting ESLint to work properly when the .eslintrc.js file is not in the root of the project - the trick was the &quot;eslint.workingDirectories&quot; setting. All the settings are included in the .vscode/settings.json file. I use VSCode open only to the root of the project with no other projects. I also recommend the following VSCode extensions:</p>
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.Go">Go</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur">Vetur</a></li>
</ul>
]]></description>
        </item>
        <item>
            <title><![CDATA[Cleaning up npm]]></title>
            <link>https://josephspurrier.github.io/gomithrilapp/blog/2020/03/07/npm.html</link>
            <guid>https://josephspurrier.github.io/gomithrilapp/blog/2020/03/07/npm.html</guid>
            <pubDate>Sat, 07 Mar 2020 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>I did a little deep dive learning today on npm modules. There were some vulnerabilities
and dependencies that were in the wrong places in the package.json file. <a href="https://github.com/josephspurrier/gomithrilapp/commit/5400404e64af1cb40586035b2f1f0b949ded5f2f">View commit</a>.</p>
<p>I added some notes to the README.md file on how to interact with the package manager. The code is also below:</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Bye Go Modules - Hello Makefile]]></title>
            <link>https://josephspurrier.github.io/gomithrilapp/blog/2020/03/07/bye-mod.html</link>
            <guid>https://josephspurrier.github.io/gomithrilapp/blog/2020/03/07/bye-mod.html</guid>
            <pubDate>Sat, 07 Mar 2020 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>I really want to use Go modules but it seems the
<a href="https://github.com/Microsoft/vscode-go/wiki/Go-modules-support-in-Visual-Studio-Code">community (&quot;â ï¸ These tools do not provide a good support for Go modules yet.&quot;)</a>
is not quite ready for them yet. Visual Studio Code is one of my favorite tools
by the Microsoft team. It's a really great editor with a great open-source
community behind it. I've enjoyed playing with the latest and greatest tech,
but the older I get, the more I want my tools to just work reliably. I stopped testing
the iOS betas because I didn't like restarting my phone every time I hopped in
the car to get music to start playing.</p>
<p>I need my IDE to allow me to be as productive
as possible so I'm switching back to vendoring depdendencies using
<a href="https://github.com/FiloSottile/gvt/blob/master/README.old.md">gvt</a> until modules
is better supported by popular tools. We've used gvt on large teams for years so
even though it's deprecated, it still works extremely well for our purposes.
<a href="https://github.com/josephspurrier/gomithrilapp/commit/a679b5a7bfaf5ab97485d302d115cebaf9a7d1ad">View commit</a>.</p>
<h2><a class="anchor" aria-hidden="true" id="makefile"></a><a href="#makefile" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Makefile</h2>
<p>Instead of keeping all the frequently used commands in a text file that team
members have to copy and paste, I added a Makefile to simply a lot of the work.
This should help streamline the process for all the engineers on your team
so each person can run the same commands quickly instead of hunting for that
text file they created a while ago.
<a href="https://github.com/josephspurrier/gomithrilapp/commit/f3d59c768daf9848cb3a856b6f816c24e8e1934e">View commit</a>.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[CI/CD with Travis-CI]]></title>
            <link>https://josephspurrier.github.io/gomithrilapp/blog/2019/05/12/travis.html</link>
            <guid>https://josephspurrier.github.io/gomithrilapp/blog/2019/05/12/travis.html</guid>
            <pubDate>Sun, 12 May 2019 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>Every project needs a good CI/CD solution - now we've got a
<a href="https://travis-ci.org/">Travis-CI</a> integration. <a href="https://github.com/josephspurrier/gomithrilapp/commit/5839a9046f438d2683857c97a7ad3fb5c23abc4f">View commit</a>.
Travis will help us check our code when we commit it to ensure all of our unit tests
and end to end tests are still passing. It will also generate Swagger spec to
make sure it's valid from our annotations.</p>
<p>If you haven't already, check out all the work Martin Fowler has on his website - he
shares a lot of great concepts and methodologies on development and testing. A good read is <a href="https://martinfowler.com/articles/practical-test-pyramid.html">The Practical Test Pyramid</a> by Ham Vocke that talks about one approach to testing.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Happy Handlers and Swagger Codegen]]></title>
            <link>https://josephspurrier.github.io/gomithrilapp/blog/2019/05/07/happy-handlers.html</link>
            <guid>https://josephspurrier.github.io/gomithrilapp/blog/2019/05/07/happy-handlers.html</guid>
            <pubDate>Tue, 07 May 2019 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>Let's improve those HTTP handlers! In 2018, I <a href="https://github.com/josephspurrier/h">released code</a> that forces an HTTP status code and an error to be returned
by all of the handlers so it's very clear what happens in each of the code paths.
<a href="https://github.com/josephspurrier/gomithrilapp/commit/4f77cb041d71ae06b07d93bb22a8aba40441503f">View commit</a>.</p>
<p>There is a new bind package (thanks to the <a href="https://github.com/go-playground/validator">go-playground</a>) that handles mapping data from a request to a struct
and also validates it. <a href="https://github.com/josephspurrier/gomithrilapp/commit/06457c34511871d720e1aa84da8fba88a725c79d">View commit</a>.</p>
<h3><a class="anchor" aria-hidden="true" id="swagger-code-generation"></a><a href="#swagger-code-generation" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Swagger Code Generation</h3>
<p>No one likes to write an API spec by hand so I added in Swagger annotations which
allows us to use <a href="https://swagger.io/tools/swagger-codegen/">Swagger Codegen</a> tool
to generate a Swagger spec from it!</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Initial Commit]]></title>
            <link>https://josephspurrier.github.io/gomithrilapp/blog/2019/04/28/initial-commit.html</link>
            <guid>https://josephspurrier.github.io/gomithrilapp/blog/2019/04/28/initial-commit.html</guid>
            <pubDate>Sun, 28 Apr 2019 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>The GitHub repo is now available: <a href="https://github.com/josephspurrier/gomithrilapp">gomithrilapp</a>. The UI and API are now available in a very early state. You can use docker-compose to get the application running on your own computer.</p>
<p>You can view the repo at this early point-in-time <a href="https://github.com/josephspurrier/gomithrilapp/tree/8003de72bc96f37c4cf8f7188c0c73fc849f8540">here</a>.</p>
]]></description>
        </item>
    </channel>
</rss>