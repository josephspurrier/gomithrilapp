{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is the API for the sample notepad application in Mithril and Go.\n\nSwagger 2.0 Spec - generated by [go-swagger](https://github.com/go-swagger/go-swagger)",
    "title": "gomithrilapp API",
    "version": "1.0"
  },
  "host": "localhost:8080",
  "basePath": "/",
  "paths": {
    "/api/v1": {
      "get": {
        "tags": [
          "healthcheck"
        ],
        "summary": "API is ready.",
        "operationId": "Ready",
        "responses": {
          "200": {
            "$ref": "#/responses/OKResponse"
          }
        }
      }
    },
    "/api/v1/login": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Authenticate a user.",
        "operationId": "UserLogin",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "x-go-name": "Email"
                },
                "password": {
                  "type": "string",
                  "x-go-name": "Password"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LoginResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/api/v1/note": {
      "get": {
        "security": [
          {
            "token": []
          }
        ],
        "tags": [
          "note"
        ],
        "summary": "List notes.",
        "operationId": "NoteIndex",
        "responses": {
          "200": {
            "$ref": "#/responses/NoteIndexResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "token": []
          }
        ],
        "tags": [
          "note"
        ],
        "summary": "Create a note.",
        "operationId": "NoteCreate",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "x-go-name": "Message"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/CreatedResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/api/v1/note/{note_id}": {
      "get": {
        "security": [
          {
            "token": []
          }
        ],
        "tags": [
          "note"
        ],
        "summary": "Show a note.",
        "operationId": "NoteShow",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "NoteID",
            "name": "note_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NoteShowResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      },
      "put": {
        "security": [
          {
            "token": []
          }
        ],
        "tags": [
          "note"
        ],
        "summary": "Update a note.",
        "operationId": "NoteUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "NoteID",
            "name": "note_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "x-go-name": "Message"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OKResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "token": []
          }
        ],
        "tags": [
          "note"
        ],
        "summary": "Delete a note.",
        "operationId": "NoteDestroy",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "NoteID",
            "name": "note_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OKResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/api/v1/register": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Register a user.",
        "operationId": "UserRegister",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "first_name",
                "last_name",
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "x-go-name": "Email"
                },
                "first_name": {
                  "type": "string",
                  "x-go-name": "FirstName"
                },
                "last_name": {
                  "type": "string",
                  "x-go-name": "LastName"
                },
                "password": {
                  "type": "string",
                  "x-go-name": "Password"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/CreatedResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "Note": {
      "type": "object",
      "title": "Note is a note of a user.",
      "required": [
        "id",
        "message"
      ],
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "UserID"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "app/api/model"
    }
  },
  "responses": {
    "BadRequestResponse": {
      "description": "BadRequestResponse returns 400.",
      "schema": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "message": {
            "description": "Message can contain a user friendly message.",
            "type": "string",
            "x-go-name": "Message"
          },
          "status": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "CreatedResponse": {
      "description": "CreatedResponse returns 201.",
      "schema": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "record_id": {
            "description": "RecordID can be used for returning the ID from a row.",
            "type": "string",
            "x-go-name": "RecordID"
          },
          "status": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "InternalServerErrorResponse": {
      "description": "InternalServerErrorResponse returns 500.",
      "schema": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "message": {
            "description": "Message can contain a user friendly message.",
            "type": "string",
            "x-go-name": "Message"
          },
          "status": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "LoginResponse": {
      "description": "LoginResponse returns 200.",
      "schema": {
        "type": "object",
        "required": [
          "status",
          "token"
        ],
        "properties": {
          "status": {
            "type": "string",
            "x-go-name": "Status"
          },
          "token": {
            "type": "string",
            "x-go-name": "Token"
          }
        }
      }
    },
    "NoteIndexResponse": {
      "description": "NoteIndexResponse returns 200.",
      "schema": {
        "type": "object",
        "required": [
          "notes"
        ],
        "properties": {
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Note"
            },
            "x-go-name": "Notes"
          }
        }
      }
    },
    "NoteShowResponse": {
      "description": "NoteShowResponse returns 200.",
      "schema": {
        "type": "object",
        "required": [
          "id",
          "message"
        ],
        "properties": {
          "id": {
            "type": "string",
            "x-go-name": "UserID"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "OKResponse": {
      "description": "OKResponse returns 200.",
      "schema": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "message": {
            "description": "Message can contain a user friendly message.",
            "type": "string",
            "x-go-name": "Message"
          },
          "status": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "UnauthorizedResponse": {
      "description": "UnauthorizedResponse returns 401.",
      "schema": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "message": {
            "description": "Message can contain a user friendly message.",
            "type": "string",
            "x-go-name": "Message"
          },
          "status": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "token": {
      "description": "In the 'Value' textbox below, please enter in the word 'Bearer', a space, and then paste in your token.",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}