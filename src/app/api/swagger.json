{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is the API for the application.\n\nSwagger 2.0 Spec - generated by [go-swagger](https://github.com/go-swagger/go-swagger)",
    "title": "Web API",
    "version": "2.0"
  },
  "host": "localhost:8081",
  "basePath": "/",
  "paths": {
    "/v1": {
      "get": {
        "tags": [
          "healthcheck"
        ],
        "summary": "API is ready.",
        "operationId": "Ready",
        "responses": {
          "200": {
            "$ref": "#/responses/OKResponse"
          }
        }
      }
    },
    "/v1/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Authentication a user.",
        "operationId": "UserLogin",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "x-go-name": "Email"
                },
                "password": {
                  "type": "string",
                  "x-go-name": "Password"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/LoginResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/v1/register": {
      "post": {
        "security": [
          {
            "token": []
          }
        ],
        "tags": [
          "user"
        ],
        "summary": "Create a user.",
        "operationId": "UserRegister",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "first_name",
                "last_name",
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "x-go-name": "Email"
                },
                "first_name": {
                  "type": "string",
                  "x-go-name": "FirstName"
                },
                "last_name": {
                  "type": "string",
                  "x-go-name": "LastName"
                },
                "password": {
                  "type": "string",
                  "x-go-name": "Password"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/CreatedResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    }
  },
  "responses": {
    "BadRequestResponse": {
      "description": "BadRequestResponse returns 400.",
      "schema": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "message": {
            "description": "Message can contain a user friendly message.",
            "type": "string",
            "x-go-name": "Message"
          },
          "status": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "CreatedResponse": {
      "description": "CreatedResponse returns 201.",
      "schema": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "record_id": {
            "description": "RecordID can be used for returning the ID from a row.",
            "type": "string",
            "x-go-name": "RecordID"
          },
          "status": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "InternalServerErrorResponse": {
      "description": "InternalServerErrorResponse returns 500.",
      "schema": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "message": {
            "description": "Message can contain a user friendly message.",
            "type": "string",
            "x-go-name": "Message"
          },
          "status": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "LoginResponse": {
      "description": "LoginResponse returns 200.",
      "schema": {
        "type": "object",
        "required": [
          "status",
          "token"
        ],
        "properties": {
          "status": {
            "type": "string",
            "x-go-name": "Status"
          },
          "token": {
            "type": "string",
            "x-go-name": "Token"
          }
        }
      }
    },
    "OKResponse": {
      "description": "OKResponse returns 200.",
      "schema": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "message": {
            "description": "Message can contain a user friendly message.",
            "type": "string",
            "x-go-name": "Message"
          },
          "status": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "UnauthorizedResponse": {
      "description": "UnauthorizedResponse returns 401.",
      "schema": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "message": {
            "description": "Message can contain a user friendly message.",
            "type": "string",
            "x-go-name": "Message"
          },
          "status": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "token": {
      "description": "The following syntax must be used in the Authorization header: Bearer TOKEN",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}